---
interface SearchResult {
  data: {
    id: string;
    name: string;
    url: string;
  }[];
}

const url = Astro.request.url;
const query = new URL(url, "http://localhost").searchParams;
const searchQuery = query.get("q") || "";
let searchResult: SearchResult | null = null;

if (searchQuery) {
  const response = await fetch(`http://localhost:8091/ufyle/search?q=${searchQuery}`);
  searchResult = (await response.json()) as SearchResult;
}
---

<style>
  .search-block {
    margin: 50px 0px 50px 0px;
    background-color: #dddbcb;
    border-radius: 15px;
    padding: 30px;
  }

  button {
    position: relative;
    overflow: hidden;
    height: 1.5rem;
    padding: 0 2rem;
    border-radius: 1.5rem;
    background: #3d3a4e;
    background-size: 400%;
    color: #fff;
    border: none;
    cursor: pointer;
  }

  button:hover::before {
    transform: scaleX(1);
  }

  .button-content {
    position: relative;
    z-index: 1;
  }

  button::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    transform: scaleX(0);
    transform-origin: 0 50%;
    width: 100%;
    height: inherit;
    border-radius: inherit;
    background: linear-gradient(82.3deg, rgba(150, 93, 233, 1) 10.8%, rgba(99, 88, 238, 1) 94.3%);
    transition: all 0.475s;
  }

  .file-field {
    border-radius: 5px;
    box-shadow: none;
    border: 1px solid black;
    padding: 5px;
  }
</style>

<div class='search-block'>
  <h2>Dateisuche</h2>
  <form method='get'>
    <input class='file-field' type='text' name='q' placeholder='Suchbegriff eingeben...' value={searchQuery} />
    <br />
    <br />
    <button type='submit'>
      <span class='button-content'>Suchen </span>
    </button>
  </form>

  {
    searchResult && (
      <div>
        <h3>Suchergebnisse:</h3>
        <ul>
          {searchResult.data.map((item) => (
            <li>
              <strong>{item.name}</strong> - <a href={item.url}>{item.url}</a>
            </li>
          ))}
        </ul>
      </div>
    )
  }
</div>
